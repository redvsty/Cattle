---
- hosts: "{{ FS_MOUNTPOINT }}"
  become: true
  become_user: root
  gather_facts: no
  tasks:

    - name: check deployer user
      ignore_errors: yes  
      action: user name=deployer state=present
           
    - name: Install Dependencies of packages
      shell: yum install -y make wget epel-release gcc gcc-c++ pcre-devel expat-devel libxml2-devel libcurl-devel libvpx-devel libjpeg-devel libpng-devel libXpm-devel freetype-devel libmcrypt libmcrypt-devel bzip2-devel gmp-devel readline-devel libxslt-devel libzip.x86_64 libzip-devel.x86_64 openssl-devel libicu.x86_64 libicu-devel.x86_64 screen
      
    - name: Create opt package
      file: path=/opt/package state=directory mode=0775
      
    - name: Create nginx-test
      file: path=/opt/package/nginx-test state=directory mode=0775
      
    - name: Get latest
      shell: |
         cd /opt/package
         latest="$(curl -s 'http://nginx.org/en/download.html' | sed 's/</\'$'\n''</g' | sed -n '/>Stable version$/,$ p' | egrep -m1 -o '/download/nginx-.+\.tar\.gz')"
         curl "http://nginx.org$latest" > nginx-latest.tar.gz
      tags: test-nginx
      
    - name: Compile nginx
      shell: |
        getname="$(curl -s 'http://nginx.org/en/download.html' | sed 's/</\'$'\n''</g' | sed -n '/>Stable version$/,$ p' | egrep -m1 -o 'nginx-.+\.tar'  | cut -d '.' -f1-3)"
        cd /opt/package/
        tar zxvf nginx-latest.tar.gz
        cd $getname
        ./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-mail --with-mail_ssl_module --with-file-aio
        make && make install
        
    - name: Create Folder
      shell: |
        mkdir -p /var/log/trx/
        touch /var/log/trx/nginx-error.log
      
    - name: ensure file exists
      copy:
        content: ""
        dest: /usr/local/nginx/conf/retno.conf
        owner: root
        mode: 0775
  
    - name: Create retno.conf
      shell: | 
        cat <<'EOF' > /usr/local/nginx/conf/retno.conf
        server {
        listen 65058;
        location / {
        stub_status;
        allow 127.0.0.1;
        deny all;
        }
        location ~ ^/(status|ping)$ {
        access_log off;
        allow 127.0.0.1;
        deny all;
        include fastcgi_params;
        fastcgi_pass unix:/var/run/fpm/server-app.sock;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }
        }
        EOF

    - name: Nginx.conf
      shell: |
        echo -e "user deployer deployer;
        worker_processes  auto;
        worker_rlimit_nofile 200000;
        pid        /var/run/nginx.pid;
        events {
                 worker_connections  100000;
                 accept_mutex on;
                 use epoll;
                 multi_accept on;
        }
        
        http {
                 sendfile        on;
                 aio on;
                 directio 10m;
                 tcp_nodelay on;
                 tcp_nopush     on;
                 client_body_in_file_only on;
                 client_max_body_size 2048M;
                 client_header_timeout 3000;
                 client_body_timeout 3000;
                 fastcgi_read_timeout 3000;
                 fastcgi_buffers 64 128k;
                 fastcgi_buffer_size 256k;
                 access_log  off;
                 error_log /var/log/trx/nginx-error.log;
           
                 server_names_hash_bucket_size 64;
                 server_names_hash_max_size 4112;
                 include  /usr/local/nginx/conf/mime.types;                                                                                                                                                 
                 default_type  application/octet-stream;
                 log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request\" '
                                               '\$status \$body_bytes_sent "\$http_referer\" '
                                                 '\"\$http_user_agent\" \"\$http_x_forwarded_for\"';
                 proxy_buffering           on;
                 keepalive_timeout  20s 18s;
                 keepalive_requests 1000;
                 server_tokens off;
                 gzip             on;
                 gzip_min_length  20000;
                 gzip_http_version 1.1;
                 gzip_vary on;
                 gzip_comp_level 5;
                 gzip_proxied any;
                 gzip_types text/plain text/css text/javascript text/xml font/woff font/woff2 image/jpeg image/png image/gif application/x-font-woff application/json application/javascript application/x-javascript application/xml application/rss+xml application/atom+xml application/rdf+xml application/octet-stream;
                 gzip_buffers 128 8k;
                 gzip_disable \"MSIE [1-6].(?!.*SV1)\";
                 add_header X-Content-Type-Options nosniff;
                 add_header X-Frame-Options \"SAMEORIGIN\";
                 add_header X-XSS-Protection \"1; mode=block\";
                 include /usr/local/nginx/conf.d/*.conf;
                 include /usr/local/nginx/conf/retno.conf;
                 }" > /usr/local/nginx/conf/nginx.conf    
                      
    - name: Delete EOF
      lineinfile: dest=/usr/local/nginx/conf/nginx.conf
         state=absent 
         regexp='EOF'
     
    - name: Create conf.d Dir
      file: path=/usr/local/nginx/conf.d state=directory mode=0775
     
    - name: Create symbolic link
      ignore_errors: yes
      shell: |
        ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx
        mkdir -p /usr/local/nginx/ssl
  
    - name: start nginx service
      shell: |
        /usr/local/nginx/sbin/nginx
        sed -i '12 i /usr/local/nginx/sbin/nginx' /etc/rc.local

    - name: Check php sock
      shell: cat /usr/local/php7.4.15/etc/php-fpm.d/server.conf | awk -F '=' '{print $2}' | awk 'FNR == 2 {print}' | cut -d ' ' -f2
      register: phpsock

    - name: Create Conf.d directory
      file:
        path: /usr/local/nginx/conf.d
        state: directory

    - name: Create Directory Path for Domain "{{ FS_MOUNTPOINT1 }}"
      shell: |
        [[ ! -d /sites/apps/{{ FS_MOUNTPOINT1 }} ]] &&  mkdir -p /sites/apps/{{ FS_MOUNTPOINT1 }}/www \
        && chown -R deployer:deployer /sites/apps/{{ FS_MOUNTPOINT1 }}
        mkdir -p /var/log/trx/{{ FS_MOUNTPOINT1 }}.log
        chown -R deployer:deployer /var/log/trx/

    - name: Create vhost "{{ FS_MOUNTPOINT1 }}"
      shell: |
        touch /usr/local/nginx/conf.d/{{ FS_MOUNTPOINT1 }}.conf
        mkdir -p /var/www/letsencrypt/.well-known/acme-challenge/

    - name: Insert Vhost
      shell: |
        echo -e "fastcgi_cache_path /tmp/{{ FS_MOUNTPOINT1 }} levels=1:2 keys_zone={{ FS_MOUNTPOINT1 }}:10m max_size=400m inactive=60m;

        server {
               listen 80;
               server_name "{{ FS_MOUNTPOINT1 }}";
                
        #      location / {
        #      return 301 https://"{{ FS_MOUNTPOINT1 }}"$request_uri;
        #      }
         
        #      location ^~ /.well-known/acme-challenge/ {
        #      default_type "text/plain";
        #      root /var/www/letsencrypt;
        #      }
                
        #  }
                
        #      server {
        #      listen 443 ssl;
        #      server_name "{{ FS_MOUNTPOINT1 }}";
         
        #      ssl_certificate /etc/letsencrypt/live/"{{ FS_MOUNTPOINT1 }}"/fullchain.pem;
        #      ssl_certificate_key /etc/letsencrypt/live/"{{ FS_MOUNTPOINT1 }}"/privkey.pem;
         
        #      ssl_session_cache  builtin:1000  shared:SSL:10m;
        #      ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
        #      ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
        #      ssl_prefer_server_ciphers on;
         
                location ^~ /.well-known/acme-challenge/ {
                default_type "text/plain";
                root /var/www/letsencrypt;
                }
                
                location ~ /\. {
                  allow 127.0.0.1;
                  deny all;
                }

                root /sites/apps/"{{ FS_MOUNTPOINT1 }}"/www/;
                index index.php;
                #access_log /var/log/trx/"{{ FS_MOUNTPOINT1 }}"-access_log;
                error_log /var/log/trx/"{{ FS_MOUNTPOINT1 }}"-error_log;
                
                client_body_in_file_only clean;
                client_body_in_single_buffer on;
                #client_body_temp_path /tmp/"{{ FS_MOUNTPOINT1 }}"/ 1 2;                      

                location / {
                try_files \$uri \$uri/ /index.php?\$args;
                gzip on;
                gzip_disable \"msie6\";
                gzip_static on;

                gzip_vary on;
                gzip_proxied any;
                gzip_comp_level 5;
                gzip_buffers 16 8k;
                gzip_http_version 1.1;
                gzip_types text/plain text/css text/javascript text/xml font/woff font/woff2 image/jpeg image/png image/gif application/x-font-woff application/json application/javascript application/x-javascript application/xml application/rss+xml application/atom+xml application/rdf+xml application/octet-stream;
                keepalive_requests 100000;
          }
                
          location ~ \.php$ {
                          try_files \$uri /index.php =404;
                          fastcgi_split_path_info ^(.+\.php)(/.+)$;
                          #fastcgi_cache {{ FS_MOUNTPOINT1 }};
                          #fastcgi_cache_key \$scheme\$host\$request_uri\$request_method;
                          #fastcgi_cache_valid 200 301 302 5s;
                          #fastcgi_cache_use_stale updating error timeout invalid_header http_500;
                          #fastcgi_pass_header Set-Cookie;
                          #fastcgi_pass_header Cookie;
                          #fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
                          fastcgi_pass unix:/var/run/fpm/server.sock;
                          fastcgi_index index.php;
                          fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                          include fastcgi_params;
                          }
          }" > /usr/local/nginx/conf.d/{{ FS_MOUNTPOINT1 }}.conf

    - name: Reload Nginx
      shell: |
        /usr/local/nginx/sbin/nginx -s reload

    - name: Download Letsencrypt
      ignore_errors: yes
      shell: |
        git clone https://github.com/letsencrypt/letsencrypt /opt/package/letsencrypt
        wget https://raw.githubusercontent.com/certbot/certbot/7f0fa18c570942238a7de73ed99945c3710408b4/letsencrypt-auto-source/letsencrypt-auto -O /opt/package/letsencrypt/certbot-auto
        chmod 0755 /opt/package/letsencrypt/certbot-auto
        mkdir -p /var/www/letsencrypt/.well-known/acme-challenge/

    - name: Create SSL
      ignore_errors: yes
      shell: |
        yes | /opt/package/letsencrypt/certbot-auto certonly --webroot --agree-tos --no-eff-email --email support@trinix.id -w /var/www/letsencrypt -d {{FS_MOUNTPOINT1}}
        
    - name: Reload Nginx
      shell: |
        /usr/local/nginx/sbin/nginx -s reload
